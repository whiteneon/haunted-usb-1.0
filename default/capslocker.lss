
Haunted-USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008fc  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800064  00000900  00000974  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005f  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020b  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c22  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004d3  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000074d  00000000  00000000  0000208b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ed  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000514  00000000  00000000  00002d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00003269  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	0a c3       	rjmp	.+1556   	; 0x618 <__vector_1>
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	71 c0       	rjmp	.+226    	; 0xea <__bad_interrupt>
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	6f c0       	rjmp	.+222    	; 0xea <__bad_interrupt>
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	6d c0       	rjmp	.+218    	; 0xea <__bad_interrupt>
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__bad_interrupt>
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	69 c0       	rjmp	.+210    	; 0xea <__bad_interrupt>
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	67 c0       	rjmp	.+206    	; 0xea <__bad_interrupt>
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>

0000001e <usbDescriptorHidReport>:
  1e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  2e:	75 01 95 08 81 02 95 01 75 08 25 65 19 00 29 65     u.......u.%e..)e
  3e:	81 00 c0                                            ...

00000041 <usbDescriptorString0>:
  41:	04 03 09 04                                         ....

00000045 <usbDescriptorStringVendor>:
  45:	24 03 69 00 6d 00 61 00 6b 00 65 00 70 00 72 00     $.i.m.a.k.e.p.r.
  55:	6f 00 6a 00 65 00 63 00 74 00 73 00 2e 00 63 00     o.j.e.c.t.s...c.
  65:	6f 00 6d 00                                         o.m.

00000069 <usbDescriptorStringDevice>:
  69:	16 03 42 00 6f 00 73 00 73 00 4b 00 65 00 79 00     ..B.o.s.s.K.e.y.
  79:	55 00 53 00 42 00                                   U.S.B.

0000007f <usbDescriptorDevice>:
  7f:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  8f:	00 01                                               ..

00000091 <usbDescriptorConfiguration>:
  91:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
  a1:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
  b1:	00 0a 00                                            ...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d1 e0       	ldi	r29, 0x01	; 1
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ec ef       	ldi	r30, 0xFC	; 252
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <.do_copy_data_start>

000000cc <.do_copy_data_loop>:
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0

000000d0 <.do_copy_data_start>:
  d0:	a4 36       	cpi	r26, 0x64	; 100
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <.do_copy_data_loop>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a4 e6       	ldi	r26, 0x64	; 100
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 3a       	cpi	r26, 0xA5	; 165
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	43 d0       	rcall	.+134    	; 0x16e <main>
  e8:	08 c4       	rjmp	.+2064   	; 0x8fa <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <buildReport>:
  ec:	80 91 6c 00 	lds	r24, 0x006C
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	49 f4       	brne	.+18     	; 0x106 <buildReport+0x1a>
  f4:	80 91 69 00 	lds	r24, 0x0069
  f8:	88 23       	and	r24, r24
  fa:	29 f4       	brne	.+10     	; 0x106 <buildReport+0x1a>
  fc:	10 92 6c 00 	sts	0x006C, r1
 100:	2b e2       	ldi	r18, 0x2B	; 43
 102:	92 ee       	ldi	r25, 0xE2	; 226
 104:	02 c0       	rjmp	.+4      	; 0x10a <buildReport+0x1e>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 91 69 00 	lds	r24, 0x0069
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 69 00 	sts	0x0069, r24
 114:	90 93 66 00 	sts	0x0066, r25
 118:	20 93 67 00 	sts	0x0067, r18
 11c:	08 95       	ret

0000011e <usbFunctionSetup>:
 11e:	fc 01       	movw	r30, r24
 120:	86 e6       	ldi	r24, 0x66	; 102
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 8a 00 	sts	0x008A, r25
 128:	80 93 89 00 	sts	0x0089, r24
 12c:	80 81       	ld	r24, Z
 12e:	80 76       	andi	r24, 0x60	; 96
 130:	80 32       	cpi	r24, 0x20	; 32
 132:	d1 f4       	brne	.+52     	; 0x168 <__stack+0x9>
 134:	81 81       	ldd	r24, Z+1	; 0x01
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	21 f4       	brne	.+8      	; 0x142 <usbFunctionSetup+0x24>
 13a:	d8 df       	rcall	.-80     	; 0xec <buildReport>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	49 f4       	brne	.+18     	; 0x158 <usbFunctionSetup+0x3a>
 146:	88 e6       	ldi	r24, 0x68	; 104
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 8a 00 	sts	0x008A, r25
 14e:	80 93 89 00 	sts	0x0089, r24
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
 158:	8a 30       	cpi	r24, 0x0A	; 10
 15a:	31 f4       	brne	.+12     	; 0x168 <__stack+0x9>
 15c:	83 81       	ldd	r24, Z+3	; 0x03
 15e:	80 93 68 00 	sts	0x0068, r24
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret

0000016e <main>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ad d3       	rcall	.+1882   	; 0x8d2 <__eeprom_read_byte_1C1D1E>
 178:	80 2d       	mov	r24, r0
 17a:	8f 3f       	cpi	r24, 0xFF	; 255
 17c:	09 f0       	breq	.+2      	; 0x180 <main+0x12>
 17e:	81 bf       	out	0x31, r24	; 49
 180:	b8 9a       	sbi	0x17, 0	; 23
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	83 eb       	ldi	r24, 0xB3	; 179
 186:	91 ef       	ldi	r25, 0xF1	; 241
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x1a>
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	24 31       	cpi	r18, 0x14	; 20
 190:	c9 f7       	brne	.-14     	; 0x184 <main+0x16>
 192:	b8 98       	cbi	0x17, 0	; 23
 194:	88 e1       	ldi	r24, 0x18	; 24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	2e e0       	ldi	r18, 0x0E	; 14
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	a8 95       	wdr
 1a0:	81 bd       	out	0x21, r24	; 33
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	21 bd       	out	0x21, r18	; 33
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	80 bf       	out	0x30, r24	; 48
 1aa:	86 e7       	ldi	r24, 0x76	; 118
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	90 93 6b 00 	sts	0x006B, r25
 1b2:	80 93 6a 00 	sts	0x006A, r24
 1b6:	bd d0       	rcall	.+378    	; 0x332 <usbInit>
 1b8:	78 94       	sei
 1ba:	80 e6       	ldi	r24, 0x60	; 96
 1bc:	99 e0       	ldi	r25, 0x09	; 9
 1be:	90 93 6b 00 	sts	0x006B, r25
 1c2:	80 93 6a 00 	sts	0x006A, r24
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 6d 00 	sts	0x006D, r24
 1cc:	c6 e6       	ldi	r28, 0x66	; 102
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	a8 95       	wdr
 1d2:	db d0       	rcall	.+438    	; 0x38a <usbPoll>
 1d4:	b9 98       	cbi	0x17, 1	; 23
 1d6:	80 91 6c 00 	lds	r24, 0x006C
 1da:	88 23       	and	r24, r24
 1dc:	99 f4       	brne	.+38     	; 0x204 <main+0x96>
 1de:	80 91 6d 00 	lds	r24, 0x006D
 1e2:	88 23       	and	r24, r24
 1e4:	79 f4       	brne	.+30     	; 0x204 <main+0x96>
 1e6:	b1 9b       	sbis	0x16, 1	; 22
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <main+0x96>
 1ea:	bb 9a       	sbi	0x17, 3	; 23
 1ec:	c3 9a       	sbi	0x18, 3	; 24
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 6c 00 	sts	0x006C, r24
 1f4:	80 93 6d 00 	sts	0x006D, r24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 6b 00 	sts	0x006B, r25
 200:	80 93 6a 00 	sts	0x006A, r24
 204:	80 91 62 00 	lds	r24, 0x0062
 208:	84 ff       	sbrs	r24, 4
 20a:	08 c0       	rjmp	.+16     	; 0x21c <main+0xae>
 20c:	80 91 69 00 	lds	r24, 0x0069
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	20 f4       	brcc	.+8      	; 0x21c <main+0xae>
 214:	6b df       	rcall	.-298    	; 0xec <buildReport>
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	ce 01       	movw	r24, r28
 21a:	95 d0       	rcall	.+298    	; 0x346 <usbSetInterrupt>
 21c:	08 b6       	in	r0, 0x38	; 56
 21e:	02 fe       	sbrs	r0, 2
 220:	d7 cf       	rjmp	.-82     	; 0x1d0 <main+0x62>
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	88 bf       	out	0x38, r24	; 56
 226:	80 91 64 00 	lds	r24, 0x0064
 22a:	90 91 65 00 	lds	r25, 0x0065
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 65 00 	sts	0x0065, r25
 234:	80 93 64 00 	sts	0x0064, r24
 238:	20 91 6a 00 	lds	r18, 0x006A
 23c:	30 91 6b 00 	lds	r19, 0x006B
 240:	82 17       	cp	r24, r18
 242:	93 07       	cpc	r25, r19
 244:	28 f2       	brcs	.-118    	; 0x1d0 <main+0x62>
 246:	22 30       	cpi	r18, 0x02	; 2
 248:	31 05       	cpc	r19, r1
 24a:	78 f0       	brcs	.+30     	; 0x26a <main+0xfc>
 24c:	10 92 6d 00 	sts	0x006D, r1
 250:	c3 98       	cbi	0x18, 3	; 24
 252:	8c eb       	ldi	r24, 0xBC	; 188
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	90 93 6b 00 	sts	0x006B, r25
 25a:	80 93 6a 00 	sts	0x006A, r24
 25e:	10 92 65 00 	sts	0x0065, r1
 262:	10 92 64 00 	sts	0x0064, r1
 266:	10 92 69 00 	sts	0x0069, r1
 26a:	80 91 6a 00 	lds	r24, 0x006A
 26e:	90 91 6b 00 	lds	r25, 0x006B
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	09 f0       	breq	.+2      	; 0x278 <main+0x10a>
 276:	ac cf       	rjmp	.-168    	; 0x1d0 <main+0x62>
 278:	80 91 6d 00 	lds	r24, 0x006D
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	39 f4       	brne	.+14     	; 0x28e <main+0x120>
 280:	8c eb       	ldi	r24, 0xBC	; 188
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	90 93 6b 00 	sts	0x006B, r25
 288:	80 93 6a 00 	sts	0x006A, r24
 28c:	a1 cf       	rjmp	.-190    	; 0x1d0 <main+0x62>
 28e:	8c eb       	ldi	r24, 0xBC	; 188
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	90 93 6b 00 	sts	0x006B, r25
 296:	80 93 6a 00 	sts	0x006A, r24
 29a:	10 92 65 00 	sts	0x0065, r1
 29e:	10 92 64 00 	sts	0x0064, r1
 2a2:	10 92 69 00 	sts	0x0069, r1
 2a6:	94 cf       	rjmp	.-216    	; 0x1d0 <main+0x62>

000002a8 <usbEventResetReady>:
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	80 e8       	ldi	r24, 0x80	; 128
 2b8:	d8 2e       	mov	r13, r24
 2ba:	ff 24       	eor	r15, r15
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	d0 e0       	ldi	r29, 0x00	; 0
 2c0:	ef 2c       	mov	r14, r15
 2c2:	ed 0c       	add	r14, r13
 2c4:	e1 be       	out	0x31, r14	; 49
 2c6:	95 d1       	rcall	.+810    	; 0x5f2 <usbMeasureFrameLength>
 2c8:	8c 01       	movw	r16, r24
 2ca:	89 e0       	ldi	r24, 0x09	; 9
 2cc:	04 33       	cpi	r16, 0x34	; 52
 2ce:	18 07       	cpc	r17, r24
 2d0:	0c f4       	brge	.+2      	; 0x2d4 <usbEventResetReady+0x2c>
 2d2:	fe 2c       	mov	r15, r14
 2d4:	d6 94       	lsr	r13
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	c8 30       	cpi	r28, 0x08	; 8
 2da:	d1 05       	cpc	r29, r1
 2dc:	89 f7       	brne	.-30     	; 0x2c0 <usbEventResetReady+0x18>
 2de:	fa 94       	dec	r15
 2e0:	f1 be       	out	0x31, r15	; 49
 2e2:	f3 94       	inc	r15
 2e4:	cf 2d       	mov	r28, r15
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	21 96       	adiw	r28, 0x01	; 1
 2ea:	10 c0       	rjmp	.+32     	; 0x30c <usbEventResetReady+0x64>
 2ec:	82 d1       	rcall	.+772    	; 0x5f2 <usbMeasureFrameLength>
 2ee:	84 53       	subi	r24, 0x34	; 52
 2f0:	99 40       	sbci	r25, 0x09	; 9
 2f2:	97 ff       	sbrs	r25, 7
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <usbEventResetReady+0x54>
 2f6:	90 95       	com	r25
 2f8:	81 95       	neg	r24
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	80 17       	cp	r24, r16
 2fe:	91 07       	cpc	r25, r17
 300:	14 f4       	brge	.+4      	; 0x306 <usbEventResetReady+0x5e>
 302:	f1 b6       	in	r15, 0x31	; 49
 304:	8c 01       	movw	r16, r24
 306:	81 b7       	in	r24, 0x31	; 49
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	81 bf       	out	0x31, r24	; 49
 30c:	81 b7       	in	r24, 0x31	; 49
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	c8 17       	cp	r28, r24
 312:	d9 07       	cpc	r29, r25
 314:	5c f7       	brge	.-42     	; 0x2ec <usbEventResetReady+0x44>
 316:	f1 be       	out	0x31, r15	; 49
 318:	81 b7       	in	r24, 0x31	; 49
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	08 2e       	mov	r0, r24
 320:	e0 d2       	rcall	.+1472   	; 0x8e2 <__eeprom_write_byte_1C1D1E>
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	08 95       	ret

00000332 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 332:	85 b7       	in	r24, 0x35	; 53
 334:	83 60       	ori	r24, 0x03	; 3
 336:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 338:	8b b7       	in	r24, 0x3b	; 59
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 33e:	83 ec       	ldi	r24, 0xC3	; 195
 340:	80 93 7b 00 	sts	0x007B, r24
 344:	08 95       	ret

00000346 <usbSetInterrupt>:

/* ------------------------------------------------------------------------- */

#if USB_CFG_HAVE_INTRIN_ENDPOINT
USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 346:	1f 93       	push	r17
 348:	dc 01       	movw	r26, r24
 34a:	16 2f       	mov	r17, r22
#endif
#if 0   /* No runtime checks! Caller is responsible for valid data! */
    if(len > 8) /* interrupt transfers are limited to 8 bytes */
        len = 8;
#endif
    if(usbTxLen1 & 0x10){   /* packet buffer was empty */
 34c:	80 91 62 00 	lds	r24, 0x0062
 350:	84 ff       	sbrs	r24, 4
 352:	07 c0       	rjmp	.+14     	; 0x362 <usbSetInterrupt+0x1c>
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
 354:	80 91 7b 00 	lds	r24, 0x007B
 358:	98 e8       	ldi	r25, 0x88	; 136
 35a:	89 27       	eor	r24, r25
 35c:	80 93 7b 00 	sts	0x007B, r24
 360:	03 c0       	rjmp	.+6      	; 0x368 <usbSetInterrupt+0x22>
    }else{
        usbTxLen1 = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 362:	8a e5       	ldi	r24, 0x5A	; 90
 364:	80 93 62 00 	sts	0x0062, r24
 368:	91 2f       	mov	r25, r17
 36a:	ec e7       	ldi	r30, 0x7C	; 124
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <usbSetInterrupt+0x2e>
    }
    p = usbTxBuf1 + 1;
    for(i=len;i--;)
        *p++ = *data++;
 370:	8d 91       	ld	r24, X+
 372:	81 93       	st	Z+, r24
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
    }else{
        usbTxLen1 = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = usbTxBuf1 + 1;
    for(i=len;i--;)
 374:	91 50       	subi	r25, 0x01	; 1
 376:	e0 f7       	brcc	.-8      	; 0x370 <usbSetInterrupt+0x2a>
        *p++ = *data++;
    usbCrc16Append(&usbTxBuf1[1], len);
 378:	61 2f       	mov	r22, r17
 37a:	8c e7       	ldi	r24, 0x7C	; 124
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	35 d1       	rcall	.+618    	; 0x5ea <usbCrc16Append>
    usbTxLen1 = len + 4;    /* len must be given including sync byte */
 380:	1c 5f       	subi	r17, 0xFC	; 252
 382:	10 93 62 00 	sts	0x0062, r17
 386:	1f 91       	pop	r17
 388:	08 95       	ret

0000038a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
schar   len;
uchar   i;

    if((len = usbRxLen) > 0){
 392:	90 91 8b 00 	lds	r25, 0x008B
 396:	19 16       	cp	r1, r25
 398:	0c f0       	brlt	.+2      	; 0x39c <usbPoll+0x12>
 39a:	ad c0       	rjmp	.+346    	; 0x4f6 <usbPoll+0x16c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
 39c:	20 91 88 00 	lds	r18, 0x0088
    if(usbRxToken < 0x10){  /* endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return; /* no reply expected, hence no usbMsgPtr, usbMsgFlags, usbMsgLen set */
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 3a0:	80 91 87 00 	lds	r24, 0x0087
 3a4:	8d 32       	cpi	r24, 0x2D	; 45
 3a6:	09 f0       	breq	.+2      	; 0x3aa <usbPoll+0x20>
 3a8:	9e c0       	rjmp	.+316    	; 0x4e6 <usbPoll+0x15c>
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
 3aa:	8a e5       	ldi	r24, 0x5A	; 90
 3ac:	80 93 61 00 	sts	0x0061, r24
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
 3b0:	9b 30       	cpi	r25, 0x0B	; 11
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <usbPoll+0x2c>
 3b4:	98 c0       	rjmp	.+304    	; 0x4e6 <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
 3b6:	cb e9       	ldi	r28, 0x9B	; 155
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	c2 1b       	sub	r28, r18
 3bc:	d1 09       	sbc	r29, r1
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
            uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
            if(type == USBRQ_TYPE_STANDARD){
 3be:	88 81       	ld	r24, Y
 3c0:	80 76       	andi	r24, 0x60	; 96
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <usbPoll+0x3c>
 3c4:	81 c0       	rjmp	.+258    	; 0x4c8 <usbPoll+0x13e>
                #define SET_REPLY_LEN(len)  replyLen = (len); usbMsgPtr = replyData
                /* This macro ensures that replyLen and usbMsgPtr are always set in the same way.
                 * That allows optimization of common code in if() branches */
                uchar *replyData = usbTxBuf + 9; /* there is 3 bytes free space at the end of the buffer */
                replyData[0] = 0;   /* common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 3c6:	29 e7       	ldi	r18, 0x79	; 121
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	10 92 79 00 	sts	0x0079, r1
                if(rq->bRequest == USBRQ_GET_STATUS){           /* 0 */
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 23       	and	r24, r24
 3d2:	41 f4       	brne	.+16     	; 0x3e4 <usbPoll+0x5a>
#endif
#if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_IMPLEMENT_HALT
                    if(recipient == USBRQ_RCPT_ENDPOINT && rq->wIndex.bytes[0] == 0x81)   /* request status for endpoint 1 */
                        replyData[0] = usbTxLen1 == USBPID_STALL;
#endif
                    replyData[1] = 0;
 3d4:	10 92 7a 00 	sts	0x007A, r1
                    SET_REPLY_LEN(2);
 3d8:	30 93 8a 00 	sts	0x008A, r19
 3dc:	20 93 89 00 	sts	0x0089, r18
 3e0:	92 e0       	ldi	r25, 0x02	; 2
 3e2:	75 c0       	rjmp	.+234    	; 0x4ce <usbPoll+0x144>
                }else if(rq->bRequest == USBRQ_SET_ADDRESS){    /* 5 */
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <usbPoll+0x66>
                    usbNewDeviceAddr = rq->wValue.bytes[0];
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	80 93 8c 00 	sts	0x008C, r24
 3ee:	6a c0       	rjmp	.+212    	; 0x4c4 <usbPoll+0x13a>
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
 3f0:	86 30       	cpi	r24, 0x06	; 6
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <usbPoll+0x6c>
 3f4:	4b c0       	rjmp	.+150    	; 0x48c <usbPoll+0x102>
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
                    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){ /* 1 */
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	41 f4       	brne	.+16     	; 0x40c <usbPoll+0x82>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 3fc:	8f e7       	ldi	r24, 0x7F	; 127
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 8a 00 	sts	0x008A, r25
 404:	80 93 89 00 	sts	0x0089, r24
 408:	92 e1       	ldi	r25, 0x12	; 18
 40a:	64 c0       	rjmp	.+200    	; 0x4d4 <usbPoll+0x14a>
                    }else if(rq->wValue.bytes[1] == USBDESCR_CONFIG){   /* 2 */
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	41 f4       	brne	.+16     	; 0x420 <usbPoll+0x96>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 410:	81 e9       	ldi	r24, 0x91	; 145
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 8a 00 	sts	0x008A, r25
 418:	80 93 89 00 	sts	0x0089, r24
 41c:	92 e2       	ldi	r25, 0x22	; 34
 41e:	5a c0       	rjmp	.+180    	; 0x4d4 <usbPoll+0x14a>
                    }else if(rq->wValue.bytes[1] == USBDESCR_STRING){   /* 3 */
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	01 f5       	brne	.+64     	; 0x464 <usbPoll+0xda>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
                        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
                            flags &= ~USB_FLG_MSGPTR_IS_ROM;
                        replyLen = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	88 23       	and	r24, r24
 428:	41 f4       	brne	.+16     	; 0x43a <usbPoll+0xb0>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 42a:	81 e4       	ldi	r24, 0x41	; 65
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 8a 00 	sts	0x008A, r25
 432:	80 93 89 00 	sts	0x0089, r24
 436:	94 e0       	ldi	r25, 0x04	; 4
 438:	4d c0       	rjmp	.+154    	; 0x4d4 <usbPoll+0x14a>
                        }else if(rq->wValue.bytes[0] == 1){
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	41 f4       	brne	.+16     	; 0x44e <usbPoll+0xc4>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 43e:	85 e4       	ldi	r24, 0x45	; 69
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 8a 00 	sts	0x008A, r25
 446:	80 93 89 00 	sts	0x0089, r24
 44a:	94 e2       	ldi	r25, 0x24	; 36
 44c:	43 c0       	rjmp	.+134    	; 0x4d4 <usbPoll+0x14a>
                        }else if(rq->wValue.bytes[0] == 2){
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	09 f0       	breq	.+2      	; 0x454 <usbPoll+0xca>
 452:	3f c0       	rjmp	.+126    	; 0x4d2 <usbPoll+0x148>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 454:	89 e6       	ldi	r24, 0x69	; 105
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 8a 00 	sts	0x008A, r25
 45c:	80 93 89 00 	sts	0x0089, r24
 460:	96 e1       	ldi	r25, 0x16	; 22
 462:	38 c0       	rjmp	.+112    	; 0x4d4 <usbPoll+0x14a>
                        }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                            replyLen = usbFunctionDescriptor(rq);
                        }
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID){          /* 0x21 */
 464:	81 32       	cpi	r24, 0x21	; 33
 466:	41 f4       	brne	.+16     	; 0x478 <usbPoll+0xee>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 468:	83 ea       	ldi	r24, 0xA3	; 163
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	90 93 8a 00 	sts	0x008A, r25
 470:	80 93 89 00 	sts	0x0089, r24
 474:	99 e0       	ldi	r25, 0x09	; 9
 476:	2e c0       	rjmp	.+92     	; 0x4d4 <usbPoll+0x14a>
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID_REPORT){   /* 0x22 */
 478:	82 32       	cpi	r24, 0x22	; 34
 47a:	59 f5       	brne	.+86     	; 0x4d2 <usbPoll+0x148>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 47c:	8e e1       	ldi	r24, 0x1E	; 30
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 8a 00 	sts	0x008A, r25
 484:	80 93 89 00 	sts	0x0089, r24
 488:	93 e2       	ldi	r25, 0x23	; 35
 48a:	24 c0       	rjmp	.+72     	; 0x4d4 <usbPoll+0x14a>
#endif  /* USB_CFG_DESCR_PROPS_HID_REPORT */
                    }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                        replyLen = usbFunctionDescriptor(rq);
                    }
                }else if(rq->bRequest == USBRQ_GET_CONFIGURATION){  /* 8 */
 48c:	88 30       	cpi	r24, 0x08	; 8
 48e:	39 f4       	brne	.+14     	; 0x49e <usbPoll+0x114>
                    replyData = &usbConfiguration;  /* send current configuration value */
                    SET_REPLY_LEN(1);
 490:	8e e8       	ldi	r24, 0x8E	; 142
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 8a 00 	sts	0x008A, r25
 498:	80 93 89 00 	sts	0x0089, r24
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <usbPoll+0x12c>
                }else if(rq->bRequest == USBRQ_SET_CONFIGURATION){  /* 9 */
 49e:	89 30       	cpi	r24, 0x09	; 9
 4a0:	21 f4       	brne	.+8      	; 0x4aa <usbPoll+0x120>
                    usbConfiguration = rq->wValue.bytes[0];
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	80 93 8e 00 	sts	0x008E, r24
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <usbPoll+0x13a>
                    usbResetStall();
                }else if(rq->bRequest == USBRQ_GET_INTERFACE){      /* 10 */
 4aa:	8a 30       	cpi	r24, 0x0A	; 10
 4ac:	31 f4       	brne	.+12     	; 0x4ba <usbPoll+0x130>
                    SET_REPLY_LEN(1);
 4ae:	30 93 8a 00 	sts	0x008A, r19
 4b2:	20 93 89 00 	sts	0x0089, r18
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0a c0       	rjmp	.+20     	; 0x4ce <usbPoll+0x144>
#if USB_CFG_HAVE_INTRIN_ENDPOINT
                }else if(rq->bRequest == USBRQ_SET_INTERFACE){      /* 11 */
 4ba:	8b 30       	cpi	r24, 0x0B	; 11
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <usbPoll+0x13a>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 4be:	83 ec       	ldi	r24, 0xC3	; 195
 4c0:	80 93 7b 00 	sts	0x007B, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <usbPoll+0x144>
                    /* 1: CLEAR_FEATURE, 3: SET_FEATURE, 7: SET_DESCRIPTOR */
                    /* 12: SYNCH_FRAME */
                }
                #undef SET_REPLY_LEN
            }else{  /* not a standard request -- must be vendor or class request */
                replyLen = usbFunctionSetup(data);
 4c8:	ce 01       	movw	r24, r28
 4ca:	29 de       	rcall	.-942    	; 0x11e <usbFunctionSetup>
 4cc:	98 2f       	mov	r25, r24
 4ce:	20 e8       	ldi	r18, 0x80	; 128
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <usbPoll+0x14c>
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	20 ec       	ldi	r18, 0xC0	; 192
                    replyLen = rq->wLength.bytes[0];    /* IN transfers only */
                }
                flags &= ~USB_FLG_USE_DEFAULT_RW;  /* we have no valid msg, use user supplied read/write functions */
            }else   /* The 'else' prevents that we limit a replyLen of 0xff to the maximum transfer len. */
#endif
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])  /* limit length to max */
 4d6:	8f 81       	ldd	r24, Y+7	; 0x07
 4d8:	88 23       	and	r24, r24
 4da:	39 f4       	brne	.+14     	; 0x4ea <usbPoll+0x160>
 4dc:	8e 81       	ldd	r24, Y+6	; 0x06
 4de:	89 17       	cp	r24, r25
 4e0:	20 f4       	brcc	.+8      	; 0x4ea <usbPoll+0x160>
 4e2:	98 2f       	mov	r25, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <usbPoll+0x160>
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	20 e8       	ldi	r18, 0x80	; 128
            }
            flags = 0;    /* start with a DATA1 package, stay with user supplied write() function */
        }
#endif
    }
    usbMsgFlags = flags;
 4ea:	20 93 6f 00 	sts	0x006F, r18
    usbMsgLen = replyLen;
 4ee:	90 93 60 00 	sts	0x0060, r25
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 4f2:	10 92 8b 00 	sts	0x008B, r1
#endif
    }
    if(usbTxLen & 0x10){ /* transmit system idle */
 4f6:	80 91 61 00 	lds	r24, 0x0061
 4fa:	84 ff       	sbrs	r24, 4
 4fc:	45 c0       	rjmp	.+138    	; 0x588 <usbPoll+0x1fe>
        if(usbMsgLen != 0xff){  /* transmit data pending? */
 4fe:	80 91 60 00 	lds	r24, 0x0060
 502:	8f 3f       	cpi	r24, 0xFF	; 255
 504:	09 f4       	brne	.+2      	; 0x508 <usbPoll+0x17e>
 506:	40 c0       	rjmp	.+128    	; 0x588 <usbPoll+0x1fe>
 508:	18 2f       	mov	r17, r24
 50a:	89 30       	cpi	r24, 0x09	; 9
 50c:	08 f0       	brcs	.+2      	; 0x510 <usbPoll+0x186>
 50e:	18 e0       	ldi	r17, 0x08	; 8
uchar   wantLen, len, txLen, token;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 510:	81 1b       	sub	r24, r17
 512:	80 93 60 00 	sts	0x0060, r24
    token = USBPID_DATA1;
    if(usbMsgFlags & USB_FLG_TX_PACKET)
 516:	80 91 6f 00 	lds	r24, 0x006F
 51a:	80 ff       	sbrs	r24, 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <usbPoll+0x198>
 51e:	03 ec       	ldi	r16, 0xC3	; 195
 520:	01 c0       	rjmp	.+2      	; 0x524 <usbPoll+0x19a>
 522:	0b e4       	ldi	r16, 0x4B	; 75
        token = USBPID_DATA0;
    usbMsgFlags++;
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 6f 00 	sts	0x006F, r24
static uchar usbRead(uchar *data, uchar len)
{
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
 52a:	20 91 89 00 	lds	r18, 0x0089
 52e:	30 91 8a 00 	lds	r19, 0x008A
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 532:	86 fd       	sbrc	r24, 6
 534:	05 c0       	rjmp	.+10     	; 0x540 <usbPoll+0x1b6>
 536:	91 2f       	mov	r25, r17
 538:	f9 01       	movw	r30, r18
 53a:	a1 e7       	ldi	r26, 0x71	; 113
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	0d c0       	rjmp	.+26     	; 0x55a <usbPoll+0x1d0>
 540:	91 2f       	mov	r25, r17
 542:	f9 01       	movw	r30, r18
 544:	a1 e7       	ldi	r26, 0x71	; 113
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	03 c0       	rjmp	.+6      	; 0x550 <usbPoll+0x1c6>
            while(i--){
                uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
 54a:	84 91       	lpm	r24, Z
                *data++ = c;
 54c:	8d 93       	st	X+, r24
                r++;
 54e:	31 96       	adiw	r30, 0x01	; 1
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
            while(i--){
 550:	91 50       	subi	r25, 0x01	; 1
 552:	d8 f7       	brcc	.-10     	; 0x54a <usbPoll+0x1c0>
 554:	04 c0       	rjmp	.+8      	; 0x55e <usbPoll+0x1d4>
                *data++ = c;
                r++;
            }
        }else{                  /* RAM data */
            while(i--)
                *data++ = *r++;
 556:	81 91       	ld	r24, Z+
 558:	8d 93       	st	X+, r24
                uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
                *data++ = c;
                r++;
            }
        }else{                  /* RAM data */
            while(i--)
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	e0 f7       	brcc	.-8      	; 0x556 <usbPoll+0x1cc>
 55e:	c9 01       	movw	r24, r18
 560:	81 0f       	add	r24, r17
 562:	91 1d       	adc	r25, r1
                *data++ = *r++;
        }
        usbMsgPtr = r;
 564:	90 93 8a 00 	sts	0x008A, r25
 568:	80 93 89 00 	sts	0x0089, r24
    if(usbMsgFlags & USB_FLG_TX_PACKET)
        token = USBPID_DATA0;
    usbMsgFlags++;
    len = usbRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 56c:	61 2f       	mov	r22, r17
 56e:	81 e7       	ldi	r24, 0x71	; 113
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	3b d0       	rcall	.+118    	; 0x5ea <usbCrc16Append>
        txLen = len + 4;    /* length including sync byte */
        if(len < 8)         /* a partial package identifies end of message */
 574:	18 30       	cpi	r17, 0x08	; 8
 576:	19 f0       	breq	.+6      	; 0x57e <usbPoll+0x1f4>
            usbMsgLen = 0xff;
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	80 93 60 00 	sts	0x0060, r24
    }else{
        txLen = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = 0xff;
    }
    usbTxBuf[0] = token;
 57e:	00 93 70 00 	sts	0x0070, r16
        token = USBPID_DATA0;
    usbMsgFlags++;
    len = usbRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
        txLen = len + 4;    /* length including sync byte */
 582:	1c 5f       	subi	r17, 0xFC	; 252
    }else{
        txLen = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = 0xff;
    }
    usbTxBuf[0] = token;
    usbTxLen = txLen;
 584:	10 93 61 00 	sts	0x0061, r17
 588:	9a e0       	ldi	r25, 0x0A	; 10
/* We want to do
 *     return (USBIN & USBMASK);
 * here, but the compiler does int-expansion acrobatics.
 * We can avoid this by assigning to a char-sized variable.
 */
    rval = USBIN & USBMASK;
 58a:	86 b3       	in	r24, 0x16	; 22
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
        if(isNotSE0())
 58c:	85 70       	andi	r24, 0x05	; 5
 58e:	31 f4       	brne	.+12     	; 0x59c <usbPoll+0x212>
    if(usbTxLen & 0x10){ /* transmit system idle */
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
 590:	91 50       	subi	r25, 0x01	; 1
 592:	d9 f7       	brne	.-10     	; 0x58a <usbPoll+0x200>
        if(isNotSE0())
            break;
    }
    if(i == 0){ /* RESET condition, called multiple times during reset */
        usbNewDeviceAddr = 0;
 594:	10 92 8c 00 	sts	0x008C, r1
        usbDeviceAddr = 0;
 598:	10 92 86 00 	sts	0x0086, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	99 23       	and	r25, r25
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <usbPoll+0x21a>
 5a2:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
 5a4:	80 91 6e 00 	lds	r24, 0x006E
 5a8:	81 17       	cp	r24, r17
 5aa:	29 f0       	breq	.+10     	; 0x5b6 <usbPoll+0x22c>
        USB_RESET_HOOK(isReset);
 5ac:	11 23       	and	r17, r17
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <usbPoll+0x228>
 5b0:	7b de       	rcall	.-778    	; 0x2a8 <usbEventResetReady>
        wasReset = isReset;
 5b2:	10 93 6e 00 	sts	0x006E, r17
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	08 95       	ret

000005c0 <usbCrc16>:
 5c0:	a8 2f       	mov	r26, r24
 5c2:	b9 2f       	mov	r27, r25
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	50 ea       	ldi	r21, 0xA0	; 160
 5cc:	60 95       	com	r22

000005ce <crcByteLoop>:
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	58 f4       	brcc	.+22     	; 0x5e8 <crcReady>
 5d2:	2d 91       	ld	r18, X+
 5d4:	38 ef       	ldi	r19, 0xF8	; 248
 5d6:	82 27       	eor	r24, r18

000005d8 <crcBitLoop>:
 5d8:	97 95       	ror	r25
 5da:	87 95       	ror	r24
 5dc:	10 f0       	brcs	.+4      	; 0x5e2 <crcNoXor>
 5de:	84 27       	eor	r24, r20
 5e0:	95 27       	eor	r25, r21

000005e2 <crcNoXor>:
 5e2:	3f 5f       	subi	r19, 0xFF	; 255
 5e4:	c8 f3       	brcs	.-14     	; 0x5d8 <crcBitLoop>
 5e6:	f3 cf       	rjmp	.-26     	; 0x5ce <crcByteLoop>

000005e8 <crcReady>:
 5e8:	08 95       	ret

000005ea <usbCrc16Append>:
 5ea:	ea df       	rcall	.-44     	; 0x5c0 <usbCrc16>
 5ec:	8d 93       	st	X+, r24
 5ee:	9d 93       	st	X+, r25
 5f0:	08 95       	ret

000005f2 <usbMeasureFrameLength>:
 5f2:	a6 e0       	ldi	r26, 0x06	; 6
 5f4:	88 27       	eor	r24, r24
 5f6:	99 27       	eor	r25, r25

000005f8 <usbMFTime16>:
 5f8:	aa 95       	dec	r26
 5fa:	69 f0       	breq	.+26     	; 0x616 <usbMFTimeout>

000005fc <usbMFWaitStrobe>:
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	e1 f3       	breq	.-8      	; 0x5f8 <usbMFTime16>
 600:	b0 99       	sbic	0x16, 0	; 22
 602:	fc cf       	rjmp	.-8      	; 0x5fc <usbMFWaitStrobe>

00000604 <usbMFWaitIdle>:
 604:	b0 9b       	sbis	0x16, 0	; 22
 606:	fe cf       	rjmp	.-4      	; 0x604 <usbMFWaitIdle>
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	99 27       	eor	r25, r25

0000060c <usbMFWaitLoop>:
 60c:	a6 b3       	in	r26, 0x16	; 22
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	11 f0       	breq	.+4      	; 0x616 <usbMFTimeout>
 612:	a5 70       	andi	r26, 0x05	; 5
 614:	d9 f7       	brne	.-10     	; 0x60c <usbMFWaitLoop>

00000616 <usbMFTimeout>:
 616:	08 95       	ret

00000618 <__vector_1>:
 618:	cf 93       	push	r28
 61a:	cf b7       	in	r28, 0x3f	; 63
 61c:	cf 93       	push	r28

0000061e <waitForJ>:
 61e:	b0 9b       	sbis	0x16, 0	; 22
 620:	fe cf       	rjmp	.-4      	; 0x61e <waitForJ>

00000622 <waitForK>:
 622:	b0 9b       	sbis	0x16, 0	; 22
 624:	0b c0       	rjmp	.+22     	; 0x63c <foundK>
 626:	b0 9b       	sbis	0x16, 0	; 22
 628:	09 c0       	rjmp	.+18     	; 0x63c <foundK>
 62a:	b0 9b       	sbis	0x16, 0	; 22
 62c:	07 c0       	rjmp	.+14     	; 0x63c <foundK>
 62e:	b0 9b       	sbis	0x16, 0	; 22
 630:	05 c0       	rjmp	.+10     	; 0x63c <foundK>
 632:	b0 9b       	sbis	0x16, 0	; 22
 634:	03 c0       	rjmp	.+6      	; 0x63c <foundK>
 636:	b0 9b       	sbis	0x16, 0	; 22
 638:	01 c0       	rjmp	.+2      	; 0x63c <foundK>
 63a:	d5 c0       	rjmp	.+426    	; 0x7e6 <sofError>

0000063c <foundK>:
 63c:	0f 92       	push	r0
 63e:	df 93       	push	r29
 640:	c0 91 88 00 	lds	r28, 0x0088
 644:	dd 27       	eor	r29, r29
 646:	c1 57       	subi	r28, 0x71	; 113
 648:	df 4f       	sbci	r29, 0xFF	; 255
 64a:	01 2e       	mov	r0, r17
 64c:	b0 9b       	sbis	0x16, 0	; 22
 64e:	03 c0       	rjmp	.+6      	; 0x656 <haveTwoBitsK>
 650:	df 91       	pop	r29
 652:	0f 90       	pop	r0
 654:	e6 cf       	rjmp	.-52     	; 0x622 <waitForK>

00000656 <haveTwoBitsK>:
 656:	2f 93       	push	r18
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	4f 93       	push	r20
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	4f 6f       	ori	r20, 0xFF	; 255
 662:	06 b3       	in	r16, 0x16	; 22
 664:	00 fb       	bst	r16, 0
 666:	20 f9       	bld	r18, 0
 668:	5f 93       	push	r21
 66a:	3f 93       	push	r19
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	3b e0       	ldi	r19, 0x0B	; 11
 670:	65 c0       	rjmp	.+202    	; 0x73c <rxbit1>

00000672 <continueWithBit5>:
 672:	16 b3       	in	r17, 0x16	; 22
 674:	01 26       	eor	r0, r17
 676:	50 29       	or	r21, r0
 678:	50 fd       	sbrc	r21, 0
 67a:	c8 95       	lpm
 67c:	56 b3       	in	r21, 0x16	; 22
 67e:	01 27       	eor	r16, r17
 680:	00 fb       	bst	r16, 0
 682:	25 f9       	bld	r18, 5
 684:	2f 73       	andi	r18, 0x3F	; 63
 686:	06 b3       	in	r16, 0x16	; 22
 688:	b1 f0       	breq	.+44     	; 0x6b6 <unstuff5>
 68a:	50 27       	eor	r21, r16
 68c:	10 27       	eor	r17, r16
 68e:	10 fb       	bst	r17, 0
 690:	26 f9       	bld	r18, 6

00000692 <didUnstuff6>:
 692:	06 b2       	in	r0, 0x16	; 22
 694:	22 30       	cpi	r18, 0x02	; 2
 696:	f0 f0       	brcs	.+60     	; 0x6d4 <unstuff6>

00000698 <didUnstuff5>:
 698:	00 c0       	rjmp	.+0      	; 0x69a <didUnstuff5+0x2>
 69a:	16 b3       	in	r17, 0x16	; 22
 69c:	01 27       	eor	r16, r17
 69e:	00 fb       	bst	r16, 0
 6a0:	27 f9       	bld	r18, 7

000006a2 <didUnstuff7>:
 6a2:	01 26       	eor	r0, r17
 6a4:	50 29       	or	r21, r0
 6a6:	06 b2       	in	r0, 0x16	; 22
 6a8:	24 30       	cpi	r18, 0x04	; 4
 6aa:	e8 f5       	brcc	.+122    	; 0x726 <rxLoop>

000006ac <unstuff7>:
 6ac:	4f 77       	andi	r20, 0x7F	; 127
 6ae:	20 68       	ori	r18, 0x80	; 128
 6b0:	16 b3       	in	r17, 0x16	; 22
 6b2:	00 00       	nop
 6b4:	f6 cf       	rjmp	.-20     	; 0x6a2 <didUnstuff7>

000006b6 <unstuff5>:
 6b6:	50 27       	eor	r21, r16
 6b8:	4f 7d       	andi	r20, 0xDF	; 223
 6ba:	20 62       	ori	r18, 0x20	; 32
 6bc:	06 b2       	in	r0, 0x16	; 22
 6be:	10 2f       	mov	r17, r16
 6c0:	00 00       	nop
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <unstuff5+0xe>
 6c4:	06 b3       	in	r16, 0x16	; 22
 6c6:	00 26       	eor	r0, r16
 6c8:	50 29       	or	r21, r0
 6ca:	10 27       	eor	r17, r16
 6cc:	10 fb       	bst	r17, 0
 6ce:	26 f9       	bld	r18, 6
 6d0:	06 b2       	in	r0, 0x16	; 22
 6d2:	e2 cf       	rjmp	.-60     	; 0x698 <didUnstuff5>

000006d4 <unstuff6>:
 6d4:	4f 7b       	andi	r20, 0xBF	; 191
 6d6:	06 b3       	in	r16, 0x16	; 22
 6d8:	20 64       	ori	r18, 0x40	; 64
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <unstuff6+0x8>
 6dc:	da cf       	rjmp	.-76     	; 0x692 <didUnstuff6>

000006de <unstuff0>:
 6de:	01 26       	eor	r0, r17
 6e0:	50 29       	or	r21, r0
 6e2:	15 70       	andi	r17, 0x05	; 5
 6e4:	06 b2       	in	r0, 0x16	; 22
 6e6:	69 f1       	breq	.+90     	; 0x742 <didUnstuff0>
 6e8:	4e 7f       	andi	r20, 0xFE	; 254
 6ea:	21 60       	ori	r18, 0x01	; 1
 6ec:	01 2f       	mov	r16, r17
 6ee:	16 b3       	in	r17, 0x16	; 22
 6f0:	28 c0       	rjmp	.+80     	; 0x742 <didUnstuff0>

000006f2 <unstuff1>:
 6f2:	00 26       	eor	r0, r16
 6f4:	50 29       	or	r21, r0
 6f6:	4d 7f       	andi	r20, 0xFD	; 253
 6f8:	06 b2       	in	r0, 0x16	; 22
 6fa:	22 60       	ori	r18, 0x02	; 2
 6fc:	10 2f       	mov	r17, r16
 6fe:	29 c0       	rjmp	.+82     	; 0x752 <didUnstuff1>

00000700 <unstuff2>:
 700:	01 26       	eor	r0, r17
 702:	50 29       	or	r21, r0
 704:	4b 7f       	andi	r20, 0xFB	; 251
 706:	06 b2       	in	r0, 0x16	; 22
 708:	24 60       	ori	r18, 0x04	; 4
 70a:	01 2f       	mov	r16, r17
 70c:	2d c0       	rjmp	.+90     	; 0x768 <didUnstuff2>

0000070e <unstuff3>:
 70e:	16 b3       	in	r17, 0x16	; 22
 710:	01 26       	eor	r0, r17
 712:	50 29       	or	r21, r0
 714:	47 7f       	andi	r20, 0xF7	; 247
 716:	28 60       	ori	r18, 0x08	; 8
 718:	00 00       	nop
 71a:	06 b2       	in	r0, 0x16	; 22
 71c:	2e c0       	rjmp	.+92     	; 0x77a <didUnstuff3>

0000071e <unstuff4>:
 71e:	4f 7e       	andi	r20, 0xEF	; 239
 720:	06 b3       	in	r16, 0x16	; 22
 722:	20 61       	ori	r18, 0x10	; 16
 724:	30 c0       	rjmp	.+96     	; 0x786 <didUnstuff4>

00000726 <rxLoop>:
 726:	42 27       	eor	r20, r18
 728:	06 b3       	in	r16, 0x16	; 22
 72a:	49 93       	st	Y+, r20
 72c:	00 26       	eor	r0, r16
 72e:	50 29       	or	r21, r0
 730:	10 27       	eor	r17, r16
 732:	06 b2       	in	r0, 0x16	; 22
 734:	4f ef       	ldi	r20, 0xFF	; 255
 736:	10 fb       	bst	r17, 0
 738:	20 f9       	bld	r18, 0
 73a:	29 7f       	andi	r18, 0xF9	; 249

0000073c <rxbit1>:
 73c:	16 b3       	in	r17, 0x16	; 22
 73e:	79 f2       	breq	.-98     	; 0x6de <unstuff0>
 740:	15 70       	andi	r17, 0x05	; 5

00000742 <didUnstuff0>:
 742:	59 f1       	breq	.+86     	; 0x79a <se0>
 744:	01 26       	eor	r0, r17
 746:	50 29       	or	r21, r0
 748:	06 b2       	in	r0, 0x16	; 22
 74a:	01 27       	eor	r16, r17
 74c:	00 fb       	bst	r16, 0
 74e:	21 f9       	bld	r18, 1
 750:	23 7f       	andi	r18, 0xF3	; 243

00000752 <didUnstuff1>:
 752:	06 b3       	in	r16, 0x16	; 22
 754:	71 f2       	breq	.-100    	; 0x6f2 <unstuff1>
 756:	00 26       	eor	r0, r16
 758:	50 29       	or	r21, r0
 75a:	31 50       	subi	r19, 0x01	; 1
 75c:	d0 f0       	brcs	.+52     	; 0x792 <overflow>
 75e:	06 b2       	in	r0, 0x16	; 22
 760:	10 27       	eor	r17, r16
 762:	10 fb       	bst	r17, 0
 764:	22 f9       	bld	r18, 2
 766:	27 7e       	andi	r18, 0xE7	; 231

00000768 <didUnstuff2>:
 768:	16 b3       	in	r17, 0x16	; 22
 76a:	51 f2       	breq	.-108    	; 0x700 <unstuff2>
 76c:	01 26       	eor	r0, r17
 76e:	50 29       	or	r21, r0
 770:	01 27       	eor	r16, r17
 772:	00 fb       	bst	r16, 0
 774:	06 b2       	in	r0, 0x16	; 22
 776:	23 f9       	bld	r18, 3
 778:	2f 7c       	andi	r18, 0xCF	; 207

0000077a <didUnstuff3>:
 77a:	49 f2       	breq	.-110    	; 0x70e <unstuff3>
 77c:	00 00       	nop
 77e:	06 b3       	in	r16, 0x16	; 22
 780:	10 27       	eor	r17, r16
 782:	10 fb       	bst	r17, 0
 784:	24 f9       	bld	r18, 4

00000786 <didUnstuff4>:
 786:	00 26       	eor	r0, r16
 788:	50 29       	or	r21, r0
 78a:	06 b2       	in	r0, 0x16	; 22
 78c:	2f 79       	andi	r18, 0x9F	; 159
 78e:	39 f2       	breq	.-114    	; 0x71e <unstuff4>
 790:	70 cf       	rjmp	.-288    	; 0x672 <continueWithBit5>

00000792 <overflow>:
 792:	10 e4       	ldi	r17, 0x40	; 64
 794:	1a bf       	out	0x3a, r17	; 58

00000796 <ignorePacket>:
 796:	00 27       	eor	r16, r16
 798:	19 c0       	rjmp	.+50     	; 0x7cc <handleSetupOrOut>

0000079a <se0>:
 79a:	3b 50       	subi	r19, 0x0B	; 11
 79c:	31 95       	neg	r19
 79e:	c3 1b       	sub	r28, r19
 7a0:	d0 40       	sbci	r29, 0x00	; 0
 7a2:	10 e4       	ldi	r17, 0x40	; 64
 7a4:	1a bf       	out	0x3a, r17	; 58
 7a6:	08 81       	ld	r16, Y
 7a8:	03 3c       	cpi	r16, 0xC3	; 195
 7aa:	09 f1       	breq	.+66     	; 0x7ee <handleData>
 7ac:	0b 34       	cpi	r16, 0x4B	; 75
 7ae:	f9 f0       	breq	.+62     	; 0x7ee <handleData>
 7b0:	20 91 86 00 	lds	r18, 0x0086
 7b4:	19 81       	ldd	r17, Y+1	; 0x01
 7b6:	11 0f       	add	r17, r17
 7b8:	12 13       	cpse	r17, r18
 7ba:	ed cf       	rjmp	.-38     	; 0x796 <ignorePacket>
 7bc:	4a 81       	ldd	r20, Y+2	; 0x02
 7be:	44 1f       	adc	r20, r20
 7c0:	09 36       	cpi	r16, 0x69	; 105
 7c2:	51 f1       	breq	.+84     	; 0x818 <handleIn>
 7c4:	0d 32       	cpi	r16, 0x2D	; 45
 7c6:	11 f0       	breq	.+4      	; 0x7cc <handleSetupOrOut>
 7c8:	01 3e       	cpi	r16, 0xE1	; 225
 7ca:	29 f7       	brne	.-54     	; 0x796 <ignorePacket>

000007cc <handleSetupOrOut>:
 7cc:	00 93 8d 00 	sts	0x008D, r16

000007d0 <doReturn>:
 7d0:	3f 91       	pop	r19
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	2f 91       	pop	r18
 7dc:	df 91       	pop	r29
 7de:	0f 90       	pop	r0
 7e0:	ca b7       	in	r28, 0x3a	; 58
 7e2:	c6 fd       	sbrc	r28, 6
 7e4:	1c cf       	rjmp	.-456    	; 0x61e <waitForJ>

000007e6 <sofError>:
 7e6:	cf 91       	pop	r28
 7e8:	cf bf       	out	0x3f, r28	; 63
 7ea:	cf 91       	pop	r28
 7ec:	18 95       	reti

000007ee <handleData>:
 7ee:	00 91 8d 00 	lds	r16, 0x008D
 7f2:	00 23       	and	r16, r16
 7f4:	69 f3       	breq	.-38     	; 0x7d0 <doReturn>
 7f6:	10 91 8b 00 	lds	r17, 0x008B
 7fa:	11 23       	and	r17, r17
 7fc:	79 f5       	brne	.+94     	; 0x85c <sendNakAndReti>
 7fe:	34 30       	cpi	r19, 0x04	; 4
 800:	7a f1       	brmi	.+94     	; 0x860 <sendAckAndReti>
 802:	30 93 8b 00 	sts	0x008B, r19
 806:	00 93 87 00 	sts	0x0087, r16
 80a:	10 91 88 00 	lds	r17, 0x0088
 80e:	3b e0       	ldi	r19, 0x0B	; 11
 810:	31 1b       	sub	r19, r17
 812:	30 93 88 00 	sts	0x0088, r19
 816:	24 c0       	rjmp	.+72     	; 0x860 <sendAckAndReti>

00000818 <handleIn>:
 818:	00 91 8b 00 	lds	r16, 0x008B
 81c:	01 30       	cpi	r16, 0x01	; 1
 81e:	f4 f4       	brge	.+60     	; 0x85c <sendNakAndReti>
 820:	0a e5       	ldi	r16, 0x5A	; 90
 822:	4f 70       	andi	r20, 0x0F	; 15
 824:	49 f4       	brne	.+18     	; 0x838 <handleIn1>
 826:	30 91 61 00 	lds	r19, 0x0061
 82a:	34 fd       	sbrc	r19, 4
 82c:	1a c0       	rjmp	.+52     	; 0x862 <sendCntAndReti>
 82e:	00 93 61 00 	sts	0x0061, r16
 832:	c0 e7       	ldi	r28, 0x70	; 112
 834:	d0 e0       	ldi	r29, 0x00	; 0
 836:	19 c0       	rjmp	.+50     	; 0x86a <usbSendAndReti>

00000838 <handleIn1>:
 838:	30 91 62 00 	lds	r19, 0x0062
 83c:	34 fd       	sbrc	r19, 4
 83e:	11 c0       	rjmp	.+34     	; 0x862 <sendCntAndReti>
 840:	00 93 62 00 	sts	0x0062, r16
 844:	cb e7       	ldi	r28, 0x7B	; 123
 846:	d0 e0       	ldi	r29, 0x00	; 0
 848:	10 c0       	rjmp	.+32     	; 0x86a <usbSendAndReti>

0000084a <bitstuff7>:
 84a:	05 27       	eor	r16, r21
 84c:	10 e0       	ldi	r17, 0x00	; 0
 84e:	00 c0       	rjmp	.+0      	; 0x850 <bitstuff7+0x6>
 850:	21 c0       	rjmp	.+66     	; 0x894 <didStuff7>

00000852 <bitstuffN>:
 852:	05 27       	eor	r16, r21
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	c8 95       	lpm
 858:	08 bb       	out	0x18, r16	; 24
 85a:	14 c0       	rjmp	.+40     	; 0x884 <didStuffN>

0000085c <sendNakAndReti>:
 85c:	3a e5       	ldi	r19, 0x5A	; 90
 85e:	01 c0       	rjmp	.+2      	; 0x862 <sendCntAndReti>

00000860 <sendAckAndReti>:
 860:	32 ed       	ldi	r19, 0xD2	; 210

00000862 <sendCntAndReti>:
 862:	03 2e       	mov	r0, r19
 864:	c0 e0       	ldi	r28, 0x00	; 0
 866:	d0 e0       	ldi	r29, 0x00	; 0
 868:	32 e0       	ldi	r19, 0x02	; 2

0000086a <usbSendAndReti>:
 86a:	17 b3       	in	r17, 0x17	; 23
 86c:	15 60       	ori	r17, 0x05	; 5
 86e:	c0 9a       	sbi	0x18, 0	; 24
 870:	08 b3       	in	r16, 0x18	; 24
 872:	17 bb       	out	0x17, r17	; 23
 874:	55 e0       	ldi	r21, 0x05	; 5
 876:	20 e8       	ldi	r18, 0x80	; 128
 878:	4f ef       	ldi	r20, 0xFF	; 255

0000087a <bitloop>:
 87a:	20 ff       	sbrs	r18, 0
 87c:	05 27       	eor	r16, r21
 87e:	08 bb       	out	0x18, r16	; 24
 880:	27 95       	ror	r18
 882:	17 95       	ror	r17

00000884 <didStuffN>:
 884:	1c 3f       	cpi	r17, 0xFC	; 252
 886:	28 f7       	brcc	.-54     	; 0x852 <bitstuffN>
 888:	00 00       	nop
 88a:	45 52       	subi	r20, 0x25	; 37
 88c:	b0 f7       	brcc	.-20     	; 0x87a <bitloop>
 88e:	20 ff       	sbrs	r18, 0
 890:	05 27       	eor	r16, r21
 892:	27 95       	ror	r18

00000894 <didStuff7>:
 894:	08 bb       	out	0x18, r16	; 24
 896:	17 95       	ror	r17
 898:	1c 3f       	cpi	r17, 0xFC	; 252
 89a:	b8 f6       	brcc	.-82     	; 0x84a <bitstuff7>
 89c:	29 91       	ld	r18, Y+
 89e:	3a 95       	dec	r19
 8a0:	61 f7       	brne	.-40     	; 0x87a <bitloop>
 8a2:	0a 7f       	andi	r16, 0xFA	; 250
 8a4:	10 91 8c 00 	lds	r17, 0x008C
 8a8:	11 0f       	add	r17, r17
 8aa:	08 bb       	out	0x18, r16	; 24
 8ac:	c2 50       	subi	r28, 0x02	; 2
 8ae:	d0 40       	sbci	r29, 0x00	; 0
 8b0:	11 f0       	breq	.+4      	; 0x8b6 <skipAddrAssign>
 8b2:	10 93 86 00 	sts	0x0086, r17

000008b6 <skipAddrAssign>:
 8b6:	10 e4       	ldi	r17, 0x40	; 64
 8b8:	1a bf       	out	0x3a, r17	; 58
 8ba:	01 60       	ori	r16, 0x01	; 1
 8bc:	17 b3       	in	r17, 0x17	; 23
 8be:	1a 7f       	andi	r17, 0xFA	; 250
 8c0:	40 2f       	mov	r20, r16
 8c2:	4a 7f       	andi	r20, 0xFA	; 250
 8c4:	54 e0       	ldi	r21, 0x04	; 4

000008c6 <se0Delay>:
 8c6:	5a 95       	dec	r21
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <se0Delay>
 8ca:	08 bb       	out	0x18, r16	; 24
 8cc:	17 bb       	out	0x17, r17	; 23
 8ce:	48 bb       	out	0x18, r20	; 24
 8d0:	7f cf       	rjmp	.-258    	; 0x7d0 <doReturn>

000008d2 <__eeprom_read_byte_1C1D1E>:
 8d2:	e1 99       	sbic	0x1c, 1	; 28
 8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <__eeprom_read_byte_1C1D1E>
 8d6:	bf bb       	out	0x1f, r27	; 31
 8d8:	ae bb       	out	0x1e, r26	; 30
 8da:	e0 9a       	sbi	0x1c, 0	; 28
 8dc:	11 96       	adiw	r26, 0x01	; 1
 8de:	0d b2       	in	r0, 0x1d	; 29
 8e0:	08 95       	ret

000008e2 <__eeprom_write_byte_1C1D1E>:
 8e2:	e1 99       	sbic	0x1c, 1	; 28
 8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <__eeprom_write_byte_1C1D1E>
 8e6:	bf bb       	out	0x1f, r27	; 31
 8e8:	ae bb       	out	0x1e, r26	; 30
 8ea:	0d ba       	out	0x1d, r0	; 29
 8ec:	11 96       	adiw	r26, 0x01	; 1
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	e2 9a       	sbi	0x1c, 2	; 28
 8f4:	e1 9a       	sbi	0x1c, 1	; 28
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	08 95       	ret

000008fa <_exit>:
 8fa:	ff cf       	rjmp	.-2      	; 0x8fa <_exit>
